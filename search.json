[{"title":"هندسه صفر قسمت دایره صفر","url":"/2025/09/18/هندسه-صفر-قسمت-دایره-صفز/","content":"خوب من اینو اللحساب زدم که یاد بمونه فردا باید هندسه رو بنویسم همچنین باید عکس هم \nبزارم چون یک چیزایی رو نمیشه بدون عکس توضیح داد \n\n![geometry](https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Westerner_and_Arab_practicing_geometry_15th_century_manuscript.jpg/960px-Westerner_and_Arab_practicing_geometry_15th_century_manuscript.jpg?20111222184339)","tags":["هندسه","دایره","زاویه"],"categories":["هندسه"]},{"title":"آمار و احتمال 0","url":"/2025/09/17/آمار-و-احتمال-0/","content":"خوب سلام فک کنم این قراره سخت ترین مطلبی باشه که قراره بنویسم چون خیلی مفهموم سنگینی داره \n\n## گزاره\nخوب اول میخوام به مفهموم گزاره بپردازم هر جمله خبری میشه یک گذاره یعنی جملات امری و احساسی و اینا گزاره نیستن و همچنین جملات توصیفی هم گزاره نیستن مثل این گل زیباست خوب معیار زیبا بودن چیه و برای هر کسی فرق میکنه اما یک پارامتری مثل سن برای همه یکسانه و همه هم نظر هستن فک کنم خودتون یکذره روش فکر کنیم به نتیجه برسید\n\n## ترکیب عطفی\nمفهموم بعدی ترکیب عطفی هست که در اون ما دو ریزالت یا گذاره داریم و مفهوم اون به کلمه و دلالت داره یعنی من وقتی دو چیز درست  میگم و ترکیب عطفی میبندم اگر جفت شون درست باشه که هست جواب درست میده اما اگر حتی یکیشون نادرست باشه جواب منفی به من میده مثل جدول زیر\n\n| p | q | p ^ q|\n|----|----|----|\n|True|True|True|\n|True|False|False|\n|False|True|False|\n|False|False|False|\n\nواو خیلی خوب درش اوردم\n\n## ترکیب فصلی\nبریم سراغ ترکیب فصلی که در اون تقریبا بر عکس ترکیف عطفی هست اگر همه چیزایی که گفته باشیم نادرست باشن اون موقع نادرست هست اما اگر فقط یک چیز درست گفته باشیم همه اون درست میشه حس میکنم خوب نمیتونم انتقالش بدم چون کلمات واقعا نمیتونن توصیفش کنن و یک خورده ای سخته\n\n| p | q | p ^ q|\n|----|----|----|\n|True|True|True|\n|True|False|True|\n|False|True|True|\n|False|False|False|\n## نقیض\nخوب موضوع بعدی شرطی گزاره هست\nخوب قبلش من بادی نقیض رو بگم نقیض همون \n\n`not`\n\nتوی پایتون توی پایتون پشت هر بولینی کلمه نات رو بزاری نقضش میکنه یعنی اگر درست هست نادرستش کن و بر عکس\n\n| p | ~p |\n|----|----|\n|True|False|\n|False|True|\n\n## شرطی گزاره\n\nحالا آماده ایم بریم سراغ شرطی گزاره \nخوب به فارسی میشه اگر گزاره پی آنگاه گزاره کیو \nاینطوری خونده میشه حالا اگر بخوایم تبدیلش کنم چجوری میشه  میشه \n\np => q -----> ~p ∨ q\n\nخوب الان متوجه شدم که علائم جبری رو توضیح ندادم ولی زیادم مهم نیست چون در ادامه آشنا میشیم با هاشون بریم سراغ جدول شرطی گزاره\n\n| p | q | p => q|\n|----|----|----|\n|True|True|True|\n|True|False|False|\n|False|True|True|\n|False|False|True|\n## عکس نقیض\n\nخوب موضوع بعدی که خیلی مهم هست برای اثبات های عجیب غریب موضوع عکس و نقیض هست یعنی \n\n`P => Q ----> ~Q => ~P`\n\nخوب حالا بریم سراغ اثباتش\n\n```\n~Q => ~P ---> Q ∨ ~P ---> ~P ∨ Q ---> P => Q\n```\nخب اثباتش نسبتا ساده است ولی خودش خیلی کاربرد داره\n[میتونید به اینجا هم یک سری بزنید](https://en.wikipedia.org/wiki/Contraposition)\n\nخوب چند تا قانون وجود داره توی دنیای جبر که باید به تک تک شون بپردازم\n\n## شرکت پذیری\nخوب اولیش شرکت پذیری هست \n\nمثل زیر \n\n`(p ^ q) ^ r ≡ p ^ (q ^ r)`\n\n`(p ∨ q) ∨ r ≡ p ∨(q ∨ r)`\n\nنکته اون هم اینه که باید بین یا ترکیب عطفی یاشه یا ترکیب فصلی\n## پخش و فاکتور گیری\nقانون بعدی قانون پخش هست که بعدش هم میتونیم بر عکسش رو هم انجام بدیم که تقریبا همون فاکتور گیری میشه\n\n`p∨(q^r) ≡ (p∨q)^(p∨r)`\n\nحالا مورد بالا میتونه مرکب هم باشه مشکلی نداره \nو خیلی هم کمک میکنه \n## قاعده جذب\nقاعده بعدی جذب هست با اون اثبات خیلی سختش\n\nما یک هم چین رابطه رو داریم\n\n`p∨(p^q) ≡ p`\n\nاثبات\nمیتونید اثبات هم اینجا ببیندی [link](https://zh.wikipedia.org/wiki/%E5%90%B8%E6%94%B6%E5%BE%8B)\n``` math \nP ∧ (P ∨ Q) = P ∨ (P ∧ Q) = P\n\n(P ∨ F) ∧ (P ∨ Q) = P ∨ (F ∧ Q) = P ∨ F = P\n\n(P ∧ T) ∨ (P ∧ Q) = P ∧ (T ∨ Q) = P ∧ T = P \n```\n## قاعده شبه جذب\nخوب قاعده شبه جذب که این آسون تره \n\n```\nP ∧ (~P ∨ Q) = (P ∧ Q)\nP ∨ (~P ∧ Q) = (P ∨ Q)\n\nاثبات\n                      .F\nP ∧ (~P ∨ Q) ----> (P ∧ ~P) ∨ (P ∧ Q) ---> F ∨ (P ∧ Q) = (P ∧ Q)\n\n                      .T\nP ∨ (~P ∧ Q) ----> (P ∨ ~P) ∧ (P ∨ Q) ---> T ∧ (P ∨ Q) = (P ∨ Q)\n```\n## قانون دمورگان\nخوب دمورگان هم بگم تموم بشه بره \n\nاگر پشت یک پرانتز خواستید نقیض بزارید باید با یک قاعده اون پخش کنید اول که ترکیب عطفی به فصلی تبدیل میشه و برعکس و همچنین باید گزاره ها رو نقض کنید\n\n```\n~(P ∨ Q) = (~P ∧ ~Q)\n~(~P ∧ Q) = (P ∨ ~Q)\n~(P ⇒ Q) = ~[~p ∨ Q] = (P ∧ ~Q)\n```\n## دو شرطی\nخوب بریم سراغ موضوع آخر یعنی دو شرطی\n\n`P <=> Q`\n\nخوب این یعنی از هر دو طرف میشه شرط گذاشت \n\n`(P => Q) ∧ (Q => P)`\n\nکه یک تساوی خیلی جالبی هم داره \n\n`(P ∧ Q) ∨ (~P ∧ ~Q)`\n\nکه همه اینا یک اثبات خیلی ساده دارن که زیاد واردش نمیشم چون گیج میشیم \n\nجدولش هم به این شکله\n\n| p | q | p >=> q|\n|----|----|----|\n|True|True|True|\n|True|False|False|\n|False|True|False|\n|False|False|True|\n\n[اگه دوست داشتی اینجا رو هم یک سری بزن](https://en.wikipedia.org/wiki/Logical_biconditional)\n\nخوب منطق خیلی گسسته است و من فقط بخش کتاب درسیم رو پوشش دادم شاید بعدا درمورد \n\n## XOR\n\n\nهم صحبت کنم چون توی برنامه نویسی هم داریمش\n\nاگه دوست داری دربارش بدونی بهتره به اینجا یک سری بزین \n\n[link](https://en.wikipedia.org/wiki/Exclusive_or)\n\nتقریبا عکس دو شرطی هستش","tags":["آمار و احتمال","جبر","منطق","دمورگان","گزاره شرطی"],"categories":["جبر","منطق","آمار و احتمال"]},{"title":"Rust_lang_0_[ENTRY point, print something, etc]]","url":"/2025/09/16/Rust-lang-0-ENTRY-point-print-something-etc/","content":"# RUST\n\nخوب من یک چیزایی در مورد زبان راست یاد \nرفتم خیلی ابتدایی هست ولی دوست داشتم که خودم یک بار درسش رو بدم\n\n## 1.Entry point\nخوب ما یک اینتری پوینت داریم که برنامه ما از اونجا کد های ما رو کمپایل میکنه که تابع \n\nmain \n\nهستش\n\nبدین صورت\n\n``` rust\nfn main(){\n\t// comment somthing\n}\n```\n## 2.print somthing(low level)\nدقیقا مثل زبان سی یا زبان های دیگه\n\nاگر بخواید چیزی رو چاپ کنید باید از تابع \n\n`println!();`\n\nاستفاده کنید\n\n``` rust\nfn main(){\n\tprintln!(\"Hello, World\");\n}\n```\n\n## 3.Set Variable\nخوب برای ست کردن متغییر روش های متعددی هست و همچنین انواع داده های زیادی هست سعی میکنم با مثال اینا رو بگم\n\n``` rust\nfn main(){\n\t// int\n\tlet a:i32 = -545; // this is 32bit number and + OR -\n    let b:u16 = 5465; // this is 16bit number in another word is + number\n    let c = 46; // by default is i32\n    \n    // float\n    let d:f32 = 55.232; // 32bit float number\n    let e:f64 = 45456.151531; // 64bit float number\n    \n    //char\n    let f:char = 'a';\n    \n    //string\n    let g:&str = \"Hi Everybody!\";\n    let h:String = \"Hi Everybody!\".to_owned();\n    let i:String = String::from(\"Hi Everybody!\");\n    \n}\n```\n## 4.Suffix\nخوب اینم از انواع متغییر حالا این متغییر ها رو اینطوری هم میشه تعریف کرد که اسمش\nsuffix هست \n\n``` rust\nfn main() {\n\tlet a = 5656_u32;\n}\n```\nیک \n\n`_<data_type>`\n\nدر پایان اون متغییر اضافه میکنیم \n\n## 5.Type Aliases \nخوب یک چیز آپشنال هم هست ما میتونیم نام مستعار بدیم به دیتا تایپ ها مثل این :\n``` rust\nfn main() {\n\ttype age =u32;\n    let a:age = 546;\n}\n```\nاین خیلی جالبه\n\n## 6.Mutability\nخب یک موضوعی هست داخل زبان راست در مورد \n\n`mutability`\n\nکه من وقتی متغییری رو تعریف میکنم حق تغییر دادنش رو ندارم چون به اصطلاح\n\n`immutable`\n\nو من باید \n\n`mutable`اش \n\nبکنم\n\nاینجوری\n\n``` rust\nfn main() {\n\t// Wrong way:\n    let a:i32= 546;\n    a = 78; // it's give me error\n    \n    //mutability    \n    let mut b:i32 = 5456465;\n    b=6516;\n}\n```\n## 7.Scope\nو مبحث بعدی در مورد \n\n`scope`\n\nهستش در زبان راست ما میتونیم کلی اسکوپ متعدد درست کنیم و متغییر هایی رو اونجا تعریف کنیم که در جا های دیگه کاربرد ندارن ولی میتونیم از متغییر های گلوبال استفاده کنیم \n\n``` rust \nfn main() {\n\ttype age =u32;\n    let a:age = 546;\n    \n    {\n    \tlet b:i16 = -55;\n    }\n    //Scope\n}\n```\n## 8.Constant\nخوب مبحث جالب بعدی \n\n`constant`\n\nها هستن که ما متغییر هایی رو تعریف میکنیم که قابلیت تعویض ندارن و این خیلی باحاله و میتونیم از شون هر جایی استفاده کنیم\n\n``` rust \nconst PI:f32 = 3.14;\nfn main() {\n\tconst K:u32 = 9;\n    \n}\n```\n## 9.Shadowing\nخوب موضوع بعدی\n\n`shadowing`\n\nهستش که وقتی یک متغییر رو دوبار تعریف میکنیم متغییر جدید سایه میندازه روی متغییر قدیمی و باعث میشه دیگه به قبلی دسترسی نداشته باشیم از نظر شخصی من بده چون ممکنه یک جا دو بار متغییر ست کنیم و لاجیک برنامه به هم بخوره \n\n``` rust \nfn main() {\n\tlet k:u32 = 9;\n    let k:u32 = 4546;\n    // The result of k is 4546\n}\n```\n## 10.Print somthing (medium level)\nخوب موضوع پایانی هم چاپ متغییر ها هستش که اونم به دو صورت انجام میشه\n\n``` rust \nfn main() {\n\tlet a = 15;\n\tprintln!(\"{}\",a); // read it : print line macro rule\n\tprintln!(\"{a}\"); // another way\n    \n    print!(\"{a}\"); // print with no \\n\n}\n```\n\n\nخوب در قسمت بعدی در مورد چگونگی گرفتن ورودی و اسپلیت کردنش یا تغییر دیتاتایپ ها صحبت میکنیم","tags":["Rust","programming"],"categories":["RUST"]},{"title":"First_notes","url":"/2025/09/15/First-notes/","content":"# Notes\nخوب من اینجا درباره نکاتی در مورد هک و امنیت وب اپلیکیشن ها و شبکه و اینا میپردازم و هدف از ساخت چنین پوستی اینه که بگم اینجا هکر نوتز هستش ","tags":["farsi","hack"],"categories":["Notes"]},{"title":"اولین پوست","url":"/2025/09/15/hello-world/","content":"# اولین پوست\n\nمن در اینجا چیزایی که یاد میگیرم رو بازگو میکنم که خودم بهتر یاد بگیرم اگر این باعث میشه که تو هم چیزایی جدیدی یاد بگیری که چه بهتر من درمورد برنامه نویسی و امنیت و شبکه و حتی موضوعات ریاضی و فیزیک مینویسم و امیدوارم همه اون چیزایی که بلدم رو درست منتقل کنم \n\n","tags":["farsi","first","persian"],"categories":["FUN"]}]